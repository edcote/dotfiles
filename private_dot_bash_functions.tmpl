confirm() {
  read -r -p "${1:-Are you sure? [y/N]} " response
  case "$response" in
    [yY][eE][sS]|[yY]) true ;;
    *) false ;;
  esac
}
export -f confirm

{{ if eq .chezmoi.osRelease.versionID "rodete" }}
gcert() {
  [[ -n "${TMUX:-}" ]] && eval $(tmx2 show-environment -s)
  command gcert "$@"
}
export -f gcert

gcertstatus() {
  [[ -n "${TMUX:-}" ]] && eval $(tmx2 show-environment -s)
  command gcertstatus "$@"
}
export -f gcertstatus

g4cleansync() {
  if ! [[ -d ${PWD%/google3*}/.citc ]]; then
    echo "ERROR: Not in g3 client" >&2
    return 1
  fi
  g4 status
  if confirm; then
    g4 revert //...
    g4 sync
    clear
  fi
}
export -f g4cleansync

hgcleansync() {
  if ! grep -s -q fig ${PWD%/google3*}/.hg/requires; then
    echo "ERROR: Not in fig client" >&2
    return 1
  fi
  hg status
  if confirm; then
    hg revert --all
    hg sync
    clear
  fi
}
export -f hgcleansync
{{ end }}

{{ if (contains "google" .chezmoi.homeDir) }}
go_sunglass() {
  local number=${1:-1}
  local branch=${2:-rdo}
  local gitroot="${HOME}/gitrepos/sunglass${branch}_${number}"

  pushd -n "${gitroot}/hardware/tb" >& /dev/null
  pushd -n "${gitroot}/hardware/traces" >& /dev/null
  pushd -n "${gitroot}/hardware/test/unit/isp_tracer" >& /dev/null
  pushd -n "${gitroot}/common/test" >& /dev/null
  pushd -n "${gitroot}/hardware/scripts/rtl_gen" >& /dev/null
  pushd -n "${gitroot}" >& /dev/null
  cd "${gitroot}"
  dirs -v
}
export -f go_sunglass

go_mlb() {
  local number=${1:-1}
  {{ if eq .chezmoi.osRelease.versionID "rodete" }}
  local reporoot="${HOME}/repos/mlb_${number}"
  {{ else }}
  local reporoot="/google/gchips/workspace/redondo-us/cbf/user/${USER}/repos/mlb_${number}"
  {{ end }}
  pushd -n "${reporoot}/infra-tools/src/infratools" >& /dev/null
  pushd -n "${reporoot}/ip/google" >& /dev/null
  pushd -n "${reporoot}/vip/google" >& /dev/null
  pushd -n "${reporoot}/mlb/verif/agents" >& /dev/null
  pushd -n "${reporoot}/mlb" >& /dev/null
  cd "${reporoot}/mlb"
  dirs -v
}
export -f go_mlb
{{ end }}

gitcleansync() {
  if ! [[ -d .git ]]; then
    echo "ERROR: Not in git root directory" >&2
    return 1
  fi
  git status
  if confirm; then
    git clean -fdx
    git pull --rebase
    git submodule update --init --recursive
    clear
  fi
}
export -f gitcleansync

rmbg() {
  if confirm; then
    local tmp=$(mktemp)
    mv $* ${tmp}
    \rm -rf $*
    \rm -rf ${tmp}
  fi
}
export -f rmbg

conda_shell() {
  eval "$(${HOME}/miniconda3/bin/conda shell.bash hook)"
}
export -f conda_shell

