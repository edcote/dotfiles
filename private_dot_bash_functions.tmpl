confirm() {
  read -r -p "${1:-Are you sure? [y/N]} " response
  case "$response" in
    [yY][eE][sS]|[yY]) true ;;
    *) false ;;
  esac
}

{{ if eq .chezmoi.osRelease.versionID "rodete" }}
gcert() {
  [[ -n "${TMUX:-}" ]] && eval $(tmx2 show-environment -s)
  command gcert "$@"
}

gcertstatus() {
  [[ -n "${TMUX:-}" ]] && eval $(tmx2 show-environment -s)
  command gcertstatus "$@"
}

g4cleansync() {
  if ! [[ -d ${PWD%/google3*}/.citc ]]; then
    echo "ERROR: Not in g3 client" >&2
    return 1
  fi
  g4 status
  if confirm; then
    g4 revert //...
    g4 sync
    clear
  fi
}

hgcleansync() {
  if ! grep -s -q fig ${PWD%/google3*}/.hg/requires; then
    echo "ERROR: Not in fig client" >&2
    return 1
  fi
  hg status
  if confirm; then
    hg revert --all
    hg sync
    clear
  fi
}
{{ end }}

gitcleansync() {
  if ! [[ -d .git ]]; then
    echo "ERROR: Not in git root directory" >&2
    return 1
  fi
  git status
  if confirm; then
    git clean -fdx
    git pull --rebase
    git submodule update --init --recursive
    clear
  fi
}

rmbg() {
  if confirm; then
    local tmp=$(mktemp)
    mv $* ${tmp}
    \rm -rf $*
    \rm -rf ${tmp}
  fi
}

ssh-agent-add() {
  local key=$1
  [[ -n ${key} ]] || key=${HOME}/.ssh/my_very_secure_key
  ssh-add "${key}"
}

ssh-agent-list() {
  if ssh-agent-alive; then
    ssh-add -l
  else
    echo "ssh-agent not available, run ssh-agent-start?" >& 2
  fi
}

# exit code 0: agent is running
# exit code 1: agent is running but has no keys
ssh-agent-alive() {
  ssh-add -l >& /dev/null
  [[ $? -lt 2 ]]
}

ssh-agent-start() {
  if ! ssh-agent-alive; then
    eval $(ssh-agent -a "${SSH_AUTH_SOCK}")
  fi
}

# Prepends directory to PATH
pathadd() {
  if [[ -d "$1" ]] && [[ ":$PATH:" != *":$1:"* ]]; then
    PATH="$1${PATH:+":$PATH"}"
  fi
}

# Adds directory to stack and print
function p() {
  local d=${1:-.}
  pushd "${d}" >& /dev/null || return 1
  dirs -v
}
